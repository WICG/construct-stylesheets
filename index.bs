<pre class=metadata>
Title: Constructable Stylesheet Objects
Shortname: construct-stylesheets
Level: 1
Status: DREAM
ED: https://wicg.github.io/construct-stylesheets/index.html
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact/
Editor: Eric Willigers, Google, ericwilligers@google.com
Editor: Rakina Zata Amni, Google, rakina@google.com
Repository: https://github.com/WICG/construct-stylesheets/
Abstract: This draft defines additions to CSSOM to make <a for="/" interface>CSSStyleSheet</a> objects directly constructable, along with a way to use them in {{DocumentOrShadowRoot}}s.
Ignored Terms: create a medialist object, add a css style sheet, document css style sheets
</pre>

<pre class='link-defaults'>
spec:dom; type:interface; text:Document
spec:cssom-1; type:interface; for:/; text:CSSStyleSheet
spec:cssom-1; type:method; for:CSSStyleSheet; text:insertRule(rule)
spec:cssom-1; type:method; for:CSSStyleSheet; text:deleteRule(rule)
spec:cssom-1; type:dfn; for:CSSStyleSheet; text:parent css style sheet
spec:cssom-1; type:dfn; for:CSSStyleSheet; text:owner node
</pre>

Motivation {#motivation}
============================

Most web components uses Shadow DOM. For a style sheet to take effect within the Shadow DOM, it currently must be specified using a style element within each shadow root. 
As a web page may contain tens of thousands of web components, this can easily have a large time and memory cost if user agents force the style sheet rules to be parsed and stored once for every style element. However, the duplications are actually not needed as the web components will most likely use the same styling, perhaps one for each component library.

Some user agents might attempt to optimize by sharing internal style sheet representations across different instances of the style element. However, component libraries may use JavaScript to modify the style sheet rules, which will thwart style sheet sharing and have large costs in performance and memory.


Proposed Solution {#proposed-solution}
============================

We are proposing to provide an API for creating stylesheet objects from script, without needing style elements, and also a way to reuse them in multiple places. Script can optionally add or remove rules from a stylesheet object. Each stylesheet object can be added directly to any number of shadow roots (and/or the top level document).

Constructing Stylesheets {#constructing-stylesheets}
=================================

<pre class='idl'>
[Constructor(optional CSSStyleSheetInit options)]
partial interface CSSStyleSheet {
	Promise&lt;CSSStyleSheet> replace(DOMString text);
	void replaceSync(DOMString text);
};

dictionary CSSStyleSheetInit {
	(MediaList or DOMString) media = "";
	DOMString title = "";
	boolean alternate = false;
	boolean disabled = false;
};
</pre>


<dl>
	<dt><dfn constructor for=CSSStyleSheet lt="CSSStyleSheet()|CSSStyleSheet(options)">CSSStyleSheet(options)</dfn></dt>
	<dd>
		When called, execute these steps:

		1. Construct a new <a for="/" interface>CSSStyleSheet</a> object <var>sheet</var>,
			with <a spec=cssom>location</a> set to the <a spec=html>base URL</a> of the {{Document}} for the {{Window}} where this constructor is called on,
			no <a spec=cssom>parent CSS style sheet</a>,
			no <a spec=cssom>owner node</a>,
			no <a spec=cssom>owner CSS rule</a>,
			and <a spec=cssom>title</a> set to the {{CSSStyleSheetInit/title}} attribute of <var>options</var>.
		2.	Set <var>sheet’s</var> origin-clean flag.
			Set <var>sheet's</var> [=constructed flag=].
			Set <var>sheet's</var> [=constructor document=] to the {{Document}} for the {{Window}} where this constructor is called on.
		3. If the {{CSSStyleSheetInit/media}} attribute of <var>options</var> is a string,
			<a>create a MediaList object</a> from the string
			and assign it as <var>sheet’s</var> <a spec=cssom>media</a>.
			Otherwise, assign a copy of the value of the attribute as <var>sheet’s</var> <a spec=cssom>media</a>.
		4. If the {{CSSStyleSheetInit/alternate}} attribute of <var>options</var> is true,
			set <var>sheet’s</var> <a spec=cssom>alternate flag</a>.
		5. If the {{CSSStyleSheetInit/disabled}} attribute of <var>options</var> is true,
			set <var>sheet’s</var> <a spec=cssom>disabled flag</a>.
		6. Return <var>sheet</var>.
	</dd>
	<dt><dfn  for=CSSStyleSheet lt="constructed flag">constructed flag</dfn></dt>
	<dd>
		Specified when created. Either set or unset. Unset by default.
		Signifies whether this stylesheet is made via constructor or not, so must be set only for stylesheets that are constructed using the {{CSSStyleSheet()}} or {{CSSStyleSheet(options)}} function.
	</dd>
	<dt><dfn  for=CSSStyleSheet lt="disallow modification flag">disallow modification flag</dfn></dt>
	<dd>
		Either set or unset. Unset by default. If set, modification to the stylesheet's rules are not allowed.
	</dd>
	<dt><dfn  for=CSSStyleSheet lt="constructor document">constructor document</dfn></dt>
	<dd>
		Specified when created. The {{Document}} where the stylesheet is originally constructed on. Null by default.
	</dd>
	<dt><dfn  for=CSSStyleSheet lt="set of adopter documents">set of adopter documents</dfn></dt>
	<dd>
		A set of {{Document}}s on which the stylesheet is adopted (e.g. there is at least one {{DocumentOrShadowRoot}} within that {{Document}}'s tree on which the sheet is part of the {{DocumentOrShadowRoot}}'s {{DocumentOrShadowRoot/adoptedStyleSheets}}).
	</dd>
</dl>

Modifying Constructed Stylesheets {#modifying-constructed-stylesheets}
=============================

After construction, constructed stylesheets can be modified using rule modification methods like <a spec="cssom-1" for="CSSStyleSheet">insertRule(rule)</a> or <a spec="cssom-1" for="CSSStyleSheet">deleteRule(rule)</a>, or {{replace(text)}} and {{replaceSync(text)}} if the sheet's [=disallow modification flag=] is not set. If those methods are called when the sheet's [=disallow modification flag=] is set, or <a spec="cssom-1" for="CSSStyleSheet">insertRule(rule)</a> is used to add an <a spec=css-cascade-4>@import</a> rule, a "{{NotAllowedError}}" {{DOMException}} must be thrown. 

<dl>
    <dt><dfn method for=CSSStyleSheet lt="insertRule(text)">insertRule(text)</dfn></dt>
    <dd>
    	1. Let <var>sheet</var> be the stylesheet on which this function is called on.
		2. If <var>sheet</var>'s [=constructed flag=] and [=disallow modification flag=] is set, throw "{{NotAllowedError}}" {{DOMException}}.
		3. If <var>rule</var> is an <a spec=css-cascade-4>@import</a> rule and this sheet's [=constructed flag=] is set, throw "{{NotAllowedError}}" {{DOMException}}.
		4. (The rest of the algorithm remains as in CSSOM)
	</dd>

	<dt><dfn method for=CSSStyleSheet lt="deleteRule(text)">deleteRule(text)</dfn></dt>
    <dd>
    	1. Let <var>sheet</var> be the stylesheet on which this function is called on.
		2. If <var>sheet</var>'s [=constructed flag=] and [=disallow modification flag=] is set, throw "{{NotAllowedError}}" {{DOMException}}.
		3. If <var>rule</var> is an <a spec=css-cascade-4>@import</a> rule and this sheet's [=constructed flag=] is set, throw "{{NotAllowedError}}" {{DOMException}}.
		4. (The rest of the algorithm remains as in CSSOM)
	</dd>

    <dt><dfn method for=CSSStyleSheet lt="replace(text)">replace(text)</dfn></dt>
    <dd>
		1. Let <var>sheet</var> be the stylesheet on which this function is called on.
		2. If <var>sheet’s</var> [=constructed flag=] is not set, or <var>sheet's</var> [=disallow modification flag=] is set, throw a "{{NotAllowedError}}" {{DOMException}}.
		3. Set <var>sheet’s</var> [=CSS rules=] to an empty list, and set <var>sheet's</var> [=disallow modification flag=].
		4. <a spec=css-syntax-3>Parse a list of rules</a> from {{text}}.
			If it returned a list of rules,
			assign the list as <var>sheet’s</var> [=CSS rules=];
			otherwise,
			set <var>sheet’s</var> [=CSS rules=] to an empty list.
		5. If <var>sheet</var> contains one or more <a spec=css-cascade-4>@import</a> rules and <var>sheet's</var> [=set of adopter documents=] contains any other {{Document}} than <var>sheet's</var> [=constructor document=], throw a "{{NotAllowedError}}" {{DOMException}}.
		6. Let <var>promise</var> be a promise.
		7. In parallel, wait for loading of <a spec=css-cascade-4>@import</a> rules in <var>sheet</var> and any nested <a spec=css-cascade-4>@import</a>s from those rules.
			* If any of them failed to load or resulted in a resource with a <a spec=html>Content-Type metadata</a> of anything other than <code>text/css</code>, reject <var>promise</var> with reason set to "{{NotAllowedError}}" {{DOMException}}.
		    * Otherwise, resolve <var>promise</var> with <var>sheet</var> once all of them have finished loading. and unset <var>sheet's</var> [=disallow modification flag=].
		8. Return <var>promise</var>.
	</dd>

    <dt><dfn method for=CSSStyleSheet lt="replaceSync(text)">replaceSync(text)</dfn></dt>
	<dd>
		When called, execute these steps:

		1. Let <var>sheet</var> be the stylesheet on which this function is called on.
		2. If <var>sheet’s</var> [=constructed flag=] is not set, or <var>sheet's</var> [=disallow modification flag=] is set, throw a "{{NotAllowedError}}" {{DOMException}}.
		3. Set <var>sheet’s</var> [=CSS rules=] to an empty list, and set <var>sheet's</var> [=disallow modification flag=].
		4. <a spec=css-syntax-3>Parse a list of rules</a> from {{text}}.
			If it returned a list of rules,
			assign the list as <var>sheet’s</var> [=CSS rules=];
			otherwise,
			set <var>sheet’s</var> [=CSS rules=] to an empty list.
		5. If <var>sheet</var> contains one or more <a spec=css-cascade-4>@import</a> rules, throw a "{{NotAllowedError}}" {{DOMException}}.
		6. Unset <var>sheet's</var> [=disallow modification flag=] and return <var>sheet</var>.
	</dd>

</dl>

Using Constructed Stylesheets {#using-constructed-stylesheets}
=============================

<pre class='idl'>
partial interface DocumentOrShadowRoot {
	attribute FrozenArray&lt;CSSStyleSheet> adoptedStyleSheets;
};
</pre>

<dl>
	<dt><dfn attribute for=DocumentOrShadowRoot lt="adoptedStyleSheets">adoptedStyleSheets</dfn></dt>
	<dd>
		On getting, {{adoptedStyleSheets}} returns this {{DocumentOrShadowRoot}}'s [=adopted stylesheets=].

		On setting, {{adoptedStyleSheets}} performs the following steps:

		1. Let <var>adopted</var> be the result of converting the given value to a FrozenArray&lt;CSSStyleSheet>
		2. If any entry of <var>adopted</var> has its [=constructed flag=] not set  (e.g. it's not made by factory methods to construct stylesheets), throw a "{{NotAllowedError}}" {{DOMException}}. 
		3. Set this {{DocumentOrShadowRoot}}'s [=adopted stylesheets=] to <var>adopted</var>.
		4. Add the {{Document}} where this {{DocumentOrShadowRoot}} is located on to the [=set of adopter documents=] for each sheet in <var>adopted</var>.
	</dd>
</dl>

Every {{DocumentOrShadowRoot}} has <dfn>adopted stylesheets</dfn>.

The user agent must include all style sheets in the {{DocumentOrShadowRoot}}'s
[=adopted stylesheets=] inside its <a>document or shadow root CSS style sheets</a>. The [=adopted stylesheets=] are ordered after all the other style sheets (i.e. those derived from {{DocumentOrShadowRoot/styleSheets}}).

If a {{DocumentOrShadowRoot}} is moved into a different {{Document}}, its [=adopted stylesheets=] are also moved along with it, retaining the same set of style sheets.




